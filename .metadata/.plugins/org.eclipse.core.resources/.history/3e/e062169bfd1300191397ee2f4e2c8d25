package com.lnt.mvc.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.lnt.mvc.exception.CustomException;
import com.lnt.mvc.model.Employee;
import com.lnt.mvc.model.Person;
import com.lnt.mvc.service.IEmployeeService;


@Controller
public class EmployeeController {
	private IEmployeeService IEmployeeService;

	
	@Autowired
	@Qualifier(value = "IEmployeeService")
	public void setIEmployeeService(IEmployeeService IEmployeeService) {
		this.IEmployeeService = IEmployeeService;
	}

	/*@ExceptionHandler(CustomException.class)
	public ModelAndView handleEmployeeNotFoundException(CustomException ex) {
		Map<String, CustomException> model = new HashMap<String, CustomException>();
		model.put("exception", ex);
		return new ModelAndView("error", model);

	}

	@ExceptionHandler(Exception.class)
	public ModelAndView handleException(Exception ex) {
		Map<String, Exception> model = new HashMap<String, Exception>();
		model.put("exception", ex);
		return new ModelAndView("error", model);

	}*/
	
	@RequestMapping(value = "/employees/add", 
			method = RequestMethod.POST)
	@ExceptionHandler({ CustomException.class })
	public String createEmployeeDetails (
			@ModelAttribute("employees") 
	@Valid Employee e, 
	BindingResult result, 
	Model model) {
		if (!result.hasErrors()) {
			if (e.getEmployee_id() == 0) {
				// new person, add it
				this.IEmployeeService.createEmployeeDetails(e);
			} else {
				// existing person, call update
				this.IEmployeeService.updateEmployeeDetails(e);
			}
			return "redirect:/employees";
		}
		model.addAttribute("listPersons", this.IEmployeeService.getAllEmployeeDetails());
		return "employees";
		
		
		
		
	}
	@RequestMapping("/delete/{id}")
	@ExceptionHandler({ CustomException.class })
	public String deleteEmployeeDetails(@PathVariable("emp_id") int emp_id) throws CustomException {
		if (emp_id < 0) {
			throw new CustomException("Given Id Not Found","404");
		} else {
			this.IEmployeeService.deleteEmployeeDetails(emp_id);
		}
		return "redirect:/employees";
	}

	
	
	
	
	
	
	
	
	
	
	public String updateEmployeeDetails (Employee Employee) {
		return null;
	}
	
	@RequestMapping(value = "/employees", method = RequestMethod.GET)
	public String getAllEmployeeDetails(Model model) {
		model.addAttribute("employee", new Employee());// model
		model.addAttribute("getAllEmployeeDetails", 
				this.IEmployeeService.getAllEmployeeDetails());
		return "employees";// view name
	}
	
	
	
	
	@RequestMapping("/showErrorPage/errors")
	@ExceptionHandler(Exception.class)
	public ModelAndView exception(Exception e) {

		ModelAndView mav = new ModelAndView("error");// view name
		mav.addObject("exName", e.getClass().getSimpleName());// model for ex name
		mav.addObject("exMessage", e.getMessage());// model for ex msg
		return mav;
}
}
