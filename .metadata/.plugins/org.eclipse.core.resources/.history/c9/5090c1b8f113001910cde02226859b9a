package com.lnt.mvc.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.lnt.mvc.exception.CustomException;
import com.lnt.mvc.model.Employee;
import com.lnt.mvc.model.Person;
import com.lnt.mvc.service.IEmployeeService;


@Controller
public class EmployeeController {
	private IEmployeeService employeeService;

	
	@Autowired
	@Qualifier(value = "employeeService")
	public void setEmployeeService(IEmployeeService employeeService) {
		this.employeeService = employeeService;
	}

	@ExceptionHandler(CustomException.class)
	public ModelAndView handleEmployeeNotFoundException(CustomException ex) {
		Map<String, CustomException> model = new HashMap<String, CustomException>();
		model.put("exception", ex);
		return new ModelAndView("error", model);

	}

	@ExceptionHandler(Exception.class)
	public ModelAndView handleException(Exception ex) {
		Map<String, Exception> model = new HashMap<String, Exception>();
		model.put("exception", ex);
		return new ModelAndView("error", model);

	}
	
	@RequestMapping(value = "/employees/add", 
			method = RequestMethod.POST)
	@ExceptionHandler({ CustomException.class })
	public String createEmployeeDetails (
			@ModelAttribute("employees") 
	@Valid Employee e, 
	BindingResult result, 
	Model model) {
		if (!result.hasErrors()) {
			if (e.getEmployee_id() == 0) {
				// new person, add it
				this.employeeService.createEmployeeDetails(e);
			} else {
				// existing person, call update
				this.employeeService.updateEmployeeDetails(e);
			}
			return "redirect:/employees";
		}
		model.addAttribute("listPersons", this.employeeService.getAllEmployeeDetails());
		return "employees";
		
		
		
		
	}
	{
		
	}
	
	
	public void updateEmployeeDetails (Employee Employee);
	public void deleteEmployeeDetails(int emp_id);
	public List <Employee> getAllEmployeeDetails();
	public Employee  getEmployeeDetails (int Employee);
	public List<Employee> getByName(String name);
	
}
